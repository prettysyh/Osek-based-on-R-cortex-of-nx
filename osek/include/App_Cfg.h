/*******************************************************************************************
* This file has been automatically generated by SmartSAR Configurator
* Smart OSEK v4.5.
*
* PLEASE DO NOT EDIT THIS FILE.
*
* Copyright 2009-2013 by Embedded System and Engineering Center of Zhejiang University (ESE)
* All rights exclusively reserved. Reproduction in whole or in part is    prohibited
* without the prior written consent of the copyright owner. The information presented in this
* document does not form part of any quotation or contract, is believed to be    accurate and
* reliable and may be changed without notice.    No liability will be accepted by the publisher
* for any consequence of its use. Publication thereof does not convey nor imply any license
* under patent or other industrial or intellectual property rights.
*******************************************************************************************/

#ifndef APPCFG_H
#define APPCFG_H

#include "Os.h"

/*************************************************************
* user configurations -- APPMODE
**************************************************************/
/*the AppModes used in this system*/        
    #define OsAppMode_0  ((AppModeType)1)

/*************************************************************
* The value of TASK's attributes
**************************************************************/
#if (OS_TASK_NUM > 0)    /* task name (format: task_name) */
    extern TaskType  EcuMStartupTwoTask ;
    extern TaskType  OsTask_0 ;
    extern TaskType  OsTask_1 ;
    extern TaskType  OsTask_2 ;
    extern TaskType  OsTask_3 ;
    extern TaskType  OsTask_4 ;
    extern TaskType  OsTask_5 ;
    extern TaskType  OsTask_6 ;
    extern TaskType  OsTask_7 ;
    extern TaskType  OsTask_8 ;
    extern TaskType  OsTask_9 ;
    extern TaskType  OsTask_10 ;

    /* task ID (format: task_name+"ID") */
    #define  EcuMStartupTwoTaskID 1
    #define  OsTask_0ID 2
    #define  OsTask_1ID 4
    #define  OsTask_2ID 3
    #define  OsTask_3ID 5
    #define  OsTask_4ID 6
    #define  OsTask_5ID 7
    #define  OsTask_6ID 8
    #define  OsTask_7ID 9
    #define  OsTask_8ID 10
    #define  OsTask_9ID 11
    #define  OsTask_10ID 12

    /* task priority (format: task_name+"Prio") */                
    #define  EcuMStartupTwoTaskPrio 2
    #define  OsTask_0Prio 4
    #define  OsTask_1Prio 5
    #define  OsTask_2Prio 6
    #define  OsTask_3Prio 3
    #define  OsTask_4Prio 3
    #define  OsTask_5Prio 3
    #define  OsTask_6Prio 4
    #define  OsTask_7Prio 4
    #define  OsTask_8Prio 4
    #define  OsTask_9Prio 4
    #define  OsTask_10Prio 4

    //#if (OS_SC2_MODULE == STD_ON)    
    /* define the length of each ready list */
        #define ReadyList1Length (1+1)
        #define ReadyList2Length (1+1)
        #define ReadyList3Length (1+1)
        #define ReadyList4Length (1+1)
        #define ReadyList5Length (1+1)
        #define ReadyList6Length (1+1)
        #define ReadyList7Length (1+1)
        #define ReadyList8Length (1+1)

    //#endif /* OS_SC2_MODULE */
        
    /* task stack size (format: task_name+"StackSize") */               
    #define  EcuMStartupTwoTaskStackSize         256 //chen add
    #define  OsTask_0StackSize         256
    #define  OsTask_1StackSize         256
    #define  OsTask_2StackSize         256
    #define  OsTask_3StackSize         256
    #define  OsTask_4StackSize         256
    #define  OsTask_5StackSize         256
    #define  OsTask_6StackSize         256
    #define  OsTask_7StackSize         256
    #define  OsTask_8StackSize         256
    #define  OsTask_9StackSize         256
    #define  OsTask_10StackSize         256

    extern OSSTK  EcuMStartupTwoTaskStack[];
    extern OSSTK  OsTask_0Stack[];
    extern OSSTK  OsTask_1Stack[];
    extern OSSTK  OsTask_2Stack[];
    extern OSSTK  OsTask_3Stack[];
    extern OSSTK  OsTask_4Stack[];
    extern OSSTK  OsTask_5Stack[];
    extern OSSTK  OsTask_6Stack[];
    extern OSSTK  OsTask_7Stack[];
    extern OSSTK  OsTask_8Stack[];
    extern OSSTK  OsTask_9Stack[];
    extern OSSTK  OsTask_10Stack[];

    /*the MAX activation NUM of Task*/
    #define EcuMStartupTwoTaskMaxNum             1
    #define OsTask_0MaxNum             1
    #define OsTask_1MaxNum             1
    #define OsTask_2MaxNum             1
    #define OsTask_3MaxNum             1
    #define OsTask_4MaxNum             1
    #define OsTask_5MaxNum             1
    #define OsTask_6MaxNum             1
    #define OsTask_7MaxNum             1
    #define OsTask_8MaxNum             1
    #define OsTask_9MaxNum             1
    #define OsTask_10MaxNum             1
    /*the ScheduleTable ID*/  

      /*the type of schedule policy of task*/    
    #define EcuMStartupTwoTaskSchedule     NON 
    #define OsTask_0Schedule     FULL 
    #define OsTask_1Schedule     FULL 
    #define OsTask_2Schedule     FULL 
    #define OsTask_3Schedule     FULL 
    #define OsTask_4Schedule     FULL 
    #define OsTask_5Schedule     FULL 
    #define OsTask_6Schedule     FULL 
    #define OsTask_7Schedule     FULL 
    #define OsTask_8Schedule     FULL 
    #define OsTask_9Schedule     FULL 
    #define OsTask_10Schedule    FULL 

    #define EcuMStartupTwoTaskAutoMode     1
    #define OsTask_0AutoMode     1
    #define OsTask_1AutoMode     1
    #define OsTask_2AutoMode     1
    #define OsTask_3AutoMode     1
    #define OsTask_4AutoMode     1
    #define OsTask_5AutoMode     1
    #define OsTask_6AutoMode     1
    #define OsTask_7AutoMode     1
    #define OsTask_8AutoMode     1
    #define OsTask_9AutoMode     1
    #define OsTask_10AutoMode     1
       
    /* declare task (format: DeclareTask(task_name)) */
    DeclareTask(EcuMStartupTwoTask);
    DeclareTask(OsTask_0);
    DeclareTask(OsTask_1);
    DeclareTask(OsTask_2);
    DeclareTask(OsTask_3);
    DeclareTask(OsTask_4);
    DeclareTask(OsTask_5);
    DeclareTask(OsTask_6);
    DeclareTask(OsTask_7);
    DeclareTask(OsTask_8);
    DeclareTask(OsTask_9);
    DeclareTask(OsTask_10);
#endif

/*************************************************************
* The value of EVENT's attributes
**************************************************************/
    #if (OS_EVENT_MODULE == STD_ON)
    /* normal event mask & declare (format: event_name+"Mask")*/
              #define OsEvent_0Mask        1
        DeclareEvent(OsEvent_0);
    /* OsNeeded Event required by RTE */
    #endif
    
/*************************************************************
* The value of COUNTER & ALARM's attributes
**************************************************************/    
    #if (OS_ALARM_MODULE == STD_ON)
        /* counter definition (format: #define counter_name counter_index) */
        #define  OsCounter_0         0
        /* maxallowedvalue (format: uppercase_name+"MAXALLOWEDVALUE") */
        #define  OSCOUNTER_0_MAXALLOWEDVALUE    65535
        /* ticksperbase (format: uppercase_name+"TICKSPERBASE") */
        #define  OSCOUNTER_0_TICKSPERBASE        50
        /* mincycle (format: uppercase_name+"_MINIMUMCYCLE") */
        #define  OSCOUNTER_0_MINIMUMCYCLE        1
        /* declare alarm (format: ALARMCALLBACK(callback_name)) */
        /* declare alarm (format: DeclareAlarm(alarm_name)) */
        DeclareAlarm(OsAlarm_0);
        DeclareAlarm(OsAlarm_1);
        DeclareAlarm(OsAlarm_2);
        DeclareAlarm(OsAlarm_3);
        DeclareAlarm(OsAlarm_4);
        DeclareAlarm(OsAlarm_5);
        /* decare alarm in OsNeed*/
    #endif


/*************************************************************
* The value of RESOURCE's attributes
**************************************************************/    
    #if (OS_RESOURCE_MODULE == STD_ON)
        /* resource priority (format: resource_name+"Prio") */
        #define OsResource_0Prio 4          
        /* declare standard and linked resource (format: DeclareResource(resource_name)) */
        DeclareResource(OsResource_0 );
        /* define external resource ID */
        #define OsResource_0ID ( 1 << 0)
    #endif

/*************************************************************
* The value of INTERRUPT's attributes
**************************************************************/    
    
/*************************************************************
* The value of SCHEDULE TABLE's attributes
**************************************************************/    
    
/*************************************************************
* The value of APPLICATION's attributes
**************************************************************/

    
#endif



